#summary How to use the unit-websocket project

= Introduction =

The unitt-websocket project is an API that allows you to use web sockets in your Java/Android projects. It conforms to the initial & latest versions of web sockets. It tries to follow the client specification from javascript using Java constructs. Web sockets provide a low latency, bi-directional, full-duplex communication channel over TCP. The new draft version of the specification allows for text messages (must be UTF-8), as well as, binary messages. For more information, see [http://en.wikipedia.org/wiki/WebSockets Wikipedia].

= Setup Your Project =

  # Include the slf4j and Apache Java commons-codec libraries. If you want to use the Java NIO version, you also need Netty.
  # Include the unitt-websocket library in your project. 

If you already use Maven, then adding the dependency to your project is as simple as adding the web socket dependency to your project
    # Add the dependency & repository:
{{{
<repositories>
    <repository>
        <id>unitt</id>
        <name>UnitT Repository</name>
        <url>http://unitt.googlecode.com/svn/repository</url>
    </repository>
</repositories>
}}}
    # Add the dependency:
{{{
<dependencies>
    <dependency>
        <groupId>com.unitt.framework</groupId>
        <artifactId>websocket</artifactId>
        <version>0.9.1</version>
        <type>jar</type>
    </dependency>
</dependencies>
}}}

= Using a Web Socket =

  ===1. The first step is to create your !WebSocketObserver. This is the class that will receive the callbacks from the web socket.===
<p>
*!MyWebSocket.java*
{{{

public class MyWebSocket implements WebSocketObserver
{
//Observer implementation
// ---------------------------------------------------------------------------
/**
 * Called when the web socket connects and is ready for reading and writing.
 **/
public void onOpen( String aProtocol, List<String> aExtensions )
{
    System.out.println("Socket is open for business.");
}

/**
 * Called when the web socket closes. aError will be nil if it closes cleanly.
 **/
public void onClose( int aStatusCode, String aMessage, Exception aException )
{
    System.out.println("Oops. It closed.");
}

/**
 * Called when the web socket receives an error. Such an error can result in the
 socket being closed.
 **/
public void onError( Exception aException )
{
    System.out.println("Oops. An error occurred.");
}

/**
 * Called when the web socket receives a message.
 **/
public void onTextMessage( String aMessage )
{
    //Hooray! I got a message to print.
    System.out.println("Did receive message: %@", aMessage);
}

/**
 * Called when the web socket receives a message.
 **/
public void onBinaryMessage( byte[] aMessage )
{
    //Hooray! I got a binary message.
}

/**
 * Called when pong is sent... For keep-alive optimization.
 **/
public void onPong( String aMessage )
{
    System.out.println("Yay! Pong was sent!");
}
}
}}}
</p>

  ===2. The next step is to actually create and use our web socket.===
<p>
*!MyWebSocket.java*
{{{
//...

private WebSocket ws;

//WebSocket logic
// ---------------------------------------------------------------------------
public void startMyWebSocket()
{
    ws.open()
    
    //continue processing other stuff
    //...
}

//Constructors
// ---------------------------------------------------------------------------
public MyWebSocket()
{
    WebSocketConnectConfig config = new WebSocketConnectConfig();
    config.setUrl( new URI("ws://localhost:8080/testws/ws/test") );
    ws =  SimpleSocketFactory.create( config, this );
}

//...
}}}
</p>

  ===3. The final step is to call our code. ===
<p>
{{{
MyWebSocket myWS = new MyWebSocket();
myWS.startMyWebSocket();

//continue processing
//...
}}}
</p>


= More Info =
  * Check out the [http://code.google.com/p/unitt/source/browse/projects/unitt-websocket/tags/0.9.1/src/main/java/com/unitt/framework/websocket/netty/ClientWebsocketFactory.java ClientWebsocketFactory.java], [http://code.google.com/p/unitt/source/browse/projects/unitt-websocket/tags/0.9.1/src/main/java/com/unitt/framework/websocket/simple/SimpleSocketFactory.java SimpleSocketFactory.java] for more information on how to use these classes.
  * For more information on web sockets, see [http://en.wikipedia.org/wiki/WebSockets Wikipedia]