#summary How to use the UnittWebSocketClient project
#labels Featured,Phase-Implementation

= Introduction =

!UnittWebSocketClient is an API that allows you to use web sockets in your iOS Objective-C projects. It conforms to the initial & latest versions of web sockets. Simply import whichever implementation you desire, !WebSocket00.h or !WebSocket07.h. It tries to follow the client specification from javascript using Objective-C constructs. Web sockets provide a low latency, bi-directional, full-duplex communication channel over TCP. The new draft version of the specification allows for text messages (must be UTF-8), as well as, binary messages. For more information, see [http://en.wikipedia.org/wiki/WebSockets Wikipedia].

= Setup Your Project =

  # Include the CFNetwork and Security frameworks
  # Add the "-all_load" flag to your "Other Linker Flags" in the "Build Settings" of your project
  # Include the !UnittWebSocketClient library in your project. For more information on this, see [xCodeIncludes Including a LIbrary in Your Xcode Project].

= Using a Web Socket =

  ===1. The first step is to create your !WebSocketDelegate. This is the class that will receive the callbacks from the web socket.===
<p>
*!MyWebSocket.h*
{{{
#import "WebSocket07.h"


@interface MyWebSocket : NSObject <WebSocket07Delegate>
{
}

@end
}}}
</p>
<p>
*!MyWebSocket.m*
{{{
#import "MyWebSocket.h"


@implementation MyWebSocket


#pragma mark Web Socket
- (void) didOpen
{
    NSLog(@"Socket is open for business.");
}

- (void) didClose: (NSError*) aError
{
    NSLog(@"Oops. It closed.");
}

- (void) didReceiveError: (NSError*) aError
{
    NSLog(@"Oops. An error occurred.");
}

- (void) didReceiveTextMessage: (NSString*) aMessage
{
    //Hooray! I got a message to print.
    NSLog(@"Did receive message: %@", aMessage);
}

- (void) didReceiveBinaryMessage: (NSData*) aMessage
{
    //Hooray! I got a message to print.
    NSLog(@"Did receive message: %@", aMessage);
}

@end
}}}
</p>

  ===2. The next step is to actually create and use our web socket.===
<p>
*!MyWebSocket.h*
{{{
#import "WebSocket07.h"


@interface MyWebSocket : NSObject <WebSocket07Delegate>
{
@private
    WebSocket07* ws;
}

@property (nonatomic, readonly) WebSocket07* ws;

- (void) startMyWebSocket;

@end
}}}
</p>
<p>
*!MyWebSocket.m*
{{{
//...

@synthesize ws;

#pragma mark Web Socket
- (void) startMyWebSocket
{
    [self.ws open];
    
    //continue processing other stuff
    //...
}

#pragma mark Lifecycle
- (id)init
{
    self = [super init];
    if (self) 
    {
        //make sure to use the right url, it must point to your specific web socket endpoint or the handshake will fail
        ws = [[WebSocket07 webSocketWithURLString:@"ws://localhost:8080/testws/ws/test" delegate:self origin:nil protocols:nil tlsSettings:nil verifyHandshake:true] retain];
    }
    return self;
    
}

- (void)dealloc 
{
    [ws release];
    [super dealloc];
}

//...
}}}
</p>

  ===3. The final step is to call our code. ===
<p>
{{{
MyWebSocket* myWS = [[MyWebSocket alloc] init];
[myWS startMyWebSocket];

//continue processing
//...
}}}
</p>


= More Info =
  * Check out the [http://code.google.com/p/unitt/source/browse/projects/iOS/UnittWebSocketClient/tags/2.2/UnittWebSocketClient/WebSocket07.h WebSocket07.h] for more information on how to use this class
  * For more information on web sockets, see [http://en.wikipedia.org/wiki/WebSockets Wikipedia]

== !WebSocket v00 ==
!WebSocket00.h is based on an earlier specification that was not as clear on how binary messages were handled. Therefore, this class only supports UTF8 text messages, so there is only send: and didReceiveMessage: instead of the text/binary variants.