#summary Using the Url Navigation Controller

[http://unitt.googlecode.com/svn/wiki/urlNavigator.png]

= Introduction =
The Url Navigation Controller class is meant to give you a navigation controller that can create and push UIViewControllers on itself from a specified URL. There is a persistent variant that also allows you to save the state of your application views and restore them on launch.


= Details =

Using the !UrlNavigationController is very straightforward. The controller is uses a !UrlManager to resolve a URL into an instance of the correct UIViewController that is pushed onto the stack by the !UrlNavigationController. 

==Classes of Interest:==
 * *!UrlHandler:* A !UrlHandler is responsible for determining if they can use the specified URL. If they can, they will construct an instance of the appropriate UIViewController (conforms to the UIViewControllerHasUrl protocol) and set the state on it in such a way that the currentUrl property returns the specified URL. A default handler is provided that simply attempts to match the urlPrefix to the beginning of the specified URL. See the !PrefixUrlHandler class for more information.
 * *!UrlManager:* A !UrlManager has an ordered list of !UrlHandlers. Each of these handlers are queried to see if they can handle the specified URL. The first one that can handle the specified URL is used.
 * *!UrlNavigationController:* Extends !NavigationController to allow URLs to be pushed onto the stack as UIViewControllers. 
 * *!PersistentUrlNavigationController:* Extends !UrlNavigationController to provide a mechanism for persisting the active URLs and loading them later.
 * *UIViewControllerHasUrl:* Protocol used to designated UIViewControllers that can represent their model data or internal state as a URL. If given a URL, they are also able to load their state or model data from that URL.


= Sample Code =

For our sample, we are going to create the screen above. A simple view whose model has only one value, a number. The UI contains only one button. When pressed this button will push a new view on the stack with a model value one higher. We will use a sample url of "test://number/numbervalue". For example, a view whose model data is the number 5, would have a URL of "test://number/5".  Pressing its button, would push a controller onto the stack with a model value of 6. 

needs completion...